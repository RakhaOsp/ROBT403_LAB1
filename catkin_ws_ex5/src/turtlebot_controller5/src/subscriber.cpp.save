#include <ros/ros.h>
#include <turtlesim/Pose.h>

#include <geometry_msgs/Twist.h>
#include <turtlesim/Spawn.h> 


ros::Publisher pub;
ros::ServiceClient client1; //it did not work to initialize this variable right here so i did it
// in main
//ros::ServiceClient client1 = nh.serviceClient<turtlesim::Spawn>(“/spawn”);

void turtleCallback(const turtlesim::Pose::ConstPtr& msg)
{

	ROS_INFO("Turtle subscriber@[%f, %f, %f]",
	msg->x, msg->y, msg->theta);

	geometry_msgs::Twist my_vel;
	my_vel.linear.x = 1.0;  // Move forward with linear velocity
	my_vel.angular.z = 1.0; // Rotate with angular velocity
	
	ROS_INFO("Publishing velocity command");// to ensure	
//publish
	pub.publish(my_vel);

	turtlesim::Spawn srv1;
	srv1.request.x = 1.0;
	srv1.request.y = 5.0;
	srv1.request.theta = 0.0;
	srv1.request.name = "Turtle_AME";
	client1.call(srv1);
}

int main(int argc, char **argv)
{
	ros::init(argc, argv, "turtlebot_subscriber");
	ros::NodeHandle nh;

    // Define the publisher
	pub = nh.advertise<geometry_msgs::Twist>("turtle1/cmd_vel", 1);

	client1 = nh.serviceClient<turtlesim::Spawn>("/spawn");  
  // Define the subscriber

	ros::Subscriber sub = nh.subscribe("turtle1/pose", 1, turtleCallback);

	ros::spin();
	return 0;
}

